version: "3"

services:
  be:
    build: .
    image: csa-be:latest
    container_name: csa-be
    command: sh -c "uvicorn app.main:app --reload --port=8000 --host=0.0.0.0"
    ports:
      - 8000:8000
    volumes:
      - .:/app/csa_be
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - AI_SERVER_URL=http://ai:8002/api
      - CERT_FILE=/usr/share/elasticsearch/config/certs/ca/ca.crt
    depends_on:
      - redis
      - es01
      - ai
    restart: always
    networks:
      - csa
    expose:
      - "8000"
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis:/usr/share/redis/data
    restart: always
    networks:
      - csa
    expose:
      - "6379"
    
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: els-setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - csa

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: els-es01
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - csa

  celery_worker:
    container_name: celery-worker
    build: .
    command: celery -A app.celery.celery worker --loglevel=INFO --concurrency=4
    volumes:
      - .:/app/csa_be
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - CERT_FILE=/usr/share/elasticsearch/config/certs/ca/ca.crt
    depends_on:
      - be
      - redis
    restart: always
    networks:
      - csa

  celery_beat:
    container_name: celery-beat
    build: .
    command: celery -A app.celery.celery beat --loglevel=INFO
    volumes:
      - .:/app/csa_be
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - CERT_FILE=/usr/share/elasticsearch/config/certs/ca/ca.crt
    depends_on:
      - be
      - redis
    restart: always
    networks:
      - csa
  
  flower:
    container_name: flower
    build: .
    command: celery -A app.celery.celery flower --port=5555
    ports:
      - 5556:5555
    volumes:
      - .:/app/csa_be
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - be
      - redis
      - celery_worker
    restart: always
    networks:
      - csa

  ai:
    build: ../AI
    container_name: csa-ai
    image: csa-ai:latest
    ports:
      - 8002:8002
    environment:
      - CUDA_HOME=/usr/local/cuda
      - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
    volumes:
      - ../AI:/app/csa_ai
    command: ["uvicorn", "app.main:app", "--reload", "--host=0.0.0.0", "--port=8002"]
    # runtime: nvidia
    networks:
      - csa
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
  
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     # - frontend
  #     - be
  #     - ai
  #   networks:
  #     - csa

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  redis:
    driver: local
  ai:
    driver: local

networks:
  csa: